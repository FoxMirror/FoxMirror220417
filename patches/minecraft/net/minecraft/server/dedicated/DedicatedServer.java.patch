--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -7,6 +_,7 @@
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.DynamicOps;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
@@ -30,6 +_,7 @@
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.NonNullList;
+import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.ConsoleInput;
 import net.minecraft.server.MinecraftServer;
@@ -52,12 +_,19 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.CreativeModeTab;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.level.DataPackConfig;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import org.apache.logging.log4j.LogManager;
+import org.bukkit.craftbukkit.v1_18_R2.SpigotTimings;
 import org.slf4j.Logger;
+import org.apache.logging.log4j.io.IoBuilder;
+import org.bukkit.command.CommandSender;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
    static final Logger f_139598_ = LogUtils.getLogger();
@@ -78,8 +_,8 @@
    @Nullable
    private final Component f_142863_;
 
-   public DedicatedServer(Thread p_203713_, LevelStorageSource.LevelStorageAccess p_203714_, PackRepository p_203715_, WorldStem p_203716_, DedicatedServerSettings p_203717_, DataFixer p_203718_, MinecraftSessionService p_203719_, GameProfileRepository p_203720_, GameProfileCache p_203721_, ChunkProgressListenerFactory p_203722_) {
-      super(p_203713_, p_203714_, p_203715_, p_203716_, Proxy.NO_PROXY, p_203718_, p_203719_, p_203720_, p_203721_, p_203722_);
+   public DedicatedServer(joptsimple.OptionSet p_139607_, DataPackConfig p_139608_, DynamicOps<Tag> registryreadops, Thread p_203713_, LevelStorageSource.LevelStorageAccess p_203714_, PackRepository p_203715_, WorldStem p_203716_, DedicatedServerSettings p_203717_, DataFixer p_203718_, MinecraftSessionService p_203719_, GameProfileRepository p_203720_, GameProfileCache p_203721_, ChunkProgressListenerFactory p_203722_) {
+      super(p_139607_, p_139608_, registryreadops, p_203713_, p_203714_, p_203715_, p_203716_, Proxy.NO_PROXY, p_203718_, p_203719_, p_203720_, p_203721_, p_203722_);
       this.f_139604_ = p_203717_;
       this.f_139602_ = new RconConsoleSource(this);
       this.f_139606_ = TextFilterClient.m_143736_(p_203717_.m_139777_().f_139724_);
@@ -89,8 +_,16 @@
    public boolean m_7038_() throws IOException {
       Thread thread = new Thread("Server console handler") {
          public void run() {
-            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
 
+            if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
+            jline.console.ConsoleReader bufferedreader = reader;
+            // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+            try {
+               System.in.available();
+            } catch (IOException ex) {
+               return;
+            }
+            // CraftBukkit end
             String s1;
             try {
                while(!DedicatedServer.this.m_129918_() && DedicatedServer.this.m_130010_() && (s1 = bufferedreader.readLine()) != null) {
@@ -99,9 +_,37 @@
             } catch (IOException ioexception1) {
                DedicatedServer.f_139598_.error("Exception handling console input", (Throwable)ioexception1);
             }
-
          }
       };
+
+      // CraftBukkit start - TODO: handle command-line logging arguments
+      java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+      global.setUseParentHandlers(false);
+      for (java.util.logging.Handler handler : global.getHandlers()) {
+         global.removeHandler(handler);
+      }
+
+      global.addHandler(new org.bukkit.craftbukkit.v1_18_R2.util.ForwardLogHandler());
+
+      // Paper start - Not needed with TerminalConsoleAppender
+      final org.apache.logging.log4j.Logger logger = LogManager.getRootLogger();
+      /*
+      final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger());
+
+      for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
+         if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
+            logger.removeAppender(appender);
+         }
+      }
+
+      new org.bukkit.craftbukkit.v1_18_R2.util.TerminalConsoleWriterThread(System.out, this.reader).start();
+      */
+      // Paper end
+
+      System.setOut(IoBuilder.forLogger(logger).setLevel( org.apache.logging.log4j.Level.INFO).buildPrintStream());
+      System.setErr(IoBuilder.forLogger(logger).setLevel( org.apache.logging.log4j.Level.WARN).buildPrintStream());
+      // CraftBukkit end
+
       thread.setDaemon(true);
       thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_139598_));
       thread.start();
@@ -152,7 +_,15 @@
       if (!this.m_129797_()) {
          f_139598_.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
          f_139598_.warn("The server will make no attempt to authenticate usernames. Beware.");
-         f_139598_.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         //LOGGER.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         // Spigot start
+         if (org.spigotmc.SpigotConfig.bungee) {
+            DedicatedServer.f_139598_.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+            DedicatedServer.f_139598_.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
+         } else {
+            DedicatedServer.f_139598_.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         }
+         // Spigot end
          f_139598_.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
       }
 
@@ -163,15 +_,26 @@
       if (!OldUsersConverter.m_11106_(this)) {
          return false;
       } else {
+         // CraftBukkit start
          this.m_129823_(new DedicatedPlayerList(this, this.m_206579_(), this.f_129745_));
+         server.loadPlugins();
+         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+         // CraftBukkit end
+         // Spigot start
+         org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+         org.spigotmc.SpigotConfig.registerCommands();
+         // Spigot end
+
          long i = Util.m_137569_();
          SkullBlockEntity.m_196700_(this.m_129927_(), this.m_129925_(), this);
          GameProfileCache.m_11004_(this.m_129797_());
+         if (!net.minecraftforge.server.ServerLifecycleHooks.handleServerAboutToStart(this)) return false;
          f_139598_.info("Preparing level \"{}\"", (Object)this.m_7123_());
          this.m_130006_();
          long j = Util.m_137569_() - i;
          String s = String.format(Locale.ROOT, "%.3fs", (double)j / 1.0E9D);
          f_139598_.info("Done ({})! For help, type \"help\"", (Object)s);
+         this.f_129726_ = Util.m_137550_(); //Forge: Update server time to prevent watchdog/spaming during long load.
          if (dedicatedserverproperties.f_139744_ != null) {
             this.m_129900_().m_46170_(GameRules.f_46153_).m_46246_(dedicatedserverproperties.f_139744_, this);
          }
@@ -184,9 +_,11 @@
          if (dedicatedserverproperties.f_139747_) {
             f_139598_.info("Starting remote control listener");
             this.f_139603_ = RconThread.m_11615_(this);
+            this.remoteConsole = new org.bukkit.craftbukkit.v1_18_R2.command.CraftRemoteConsoleCommandSender(this.f_139602_); // CraftBukkit
+
          }
 
-         if (this.m_139669_() > 0L) {
+         if (false && this.m_139669_() > 0L) {  // Spigot - disable
             Thread thread1 = new Thread(new ServerWatchdog(this));
             thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(f_139598_));
             thread1.setName("Server Watchdog");
@@ -195,12 +_,13 @@
          }
 
          Items.f_41852_.m_6787_(CreativeModeTab.f_40754_, NonNullList.m_122779_());
+         // <3 you Grum for this, saves us ~30 patch files! --^
          if (dedicatedserverproperties.f_139721_) {
             MinecraftServerStatistics.m_18328_(this);
             f_139598_.info("JMX monitoring enabled");
          }
 
-         return true;
+         return net.minecraftforge.server.ServerLifecycleHooks.handleServerStarting(this);
       }
    }
 
@@ -316,6 +_,7 @@
          this.f_139601_.m_7530_();
       }
 
+      System.exit(0);
    }
 
    public void m_5703_(BooleanSupplier p_139661_) {
@@ -332,11 +_,22 @@
    }
 
    public void m_139665_() {
+      SpigotTimings.serverCommandTimer.startTiming(); // Spigot
       while(!this.f_139600_.isEmpty()) {
-         ConsoleInput consoleinput = this.f_139600_.remove(0);
-         this.m_129892_().m_82117_(consoleinput.f_135929_, consoleinput.f_135928_);
+         ConsoleInput servercommand = (ConsoleInput) this.f_139600_.remove(0);
+
+         // CraftBukkit start - ServerCommand for preprocessing
+         ServerCommandEvent event = new ServerCommandEvent(console, servercommand.f_135928_);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) continue;
+         servercommand = new ConsoleInput(event.getCommand(), servercommand.f_135929_);
+
+         // this.getCommands().performCommand(servercommand.source, servercommand.msg); // Called in dispatchServerCommand
+         server.dispatchServerCommand(console, servercommand);
+         // CraftBukkit end
       }
 
+      SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
    }
 
    public boolean m_6982_() {
@@ -439,6 +_,11 @@
       return this.m_7913_().f_139718_;
    }
 
+   @Override
+   public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+      return console;
+   }
+
    public int m_6329_() {
       return this.m_7913_().f_139719_;
    }
@@ -518,13 +_,44 @@
    }
 
    public String m_7138_() {
-      return "";
+      // CraftBukkit start - Whole method
+      StringBuilder result = new StringBuilder();
+      org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+
+      result.append(server.getName());
+      result.append(" on Bukkit ");
+      result.append(server.getBukkitVersion());
+
+      if (plugins.length > 0 && server.getQueryPlugins()) {
+         result.append(": ");
+
+         for (int i = 0; i < plugins.length; i++) {
+            if (i > 0) {
+               result.append("; ");
+            }
+
+            result.append(plugins[i].getDescription().getName());
+            result.append(" ");
+            result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+         }
+      }
+
+      return result.toString();
+      // CraftBukkit end
    }
 
    public String m_7261_(String p_139644_) {
       this.f_139602_.m_11512_();
       this.m_18709_(() -> {
-         this.m_129892_().m_82117_(this.f_139602_.m_11514_(), p_139644_);
+         // CraftBukkit start - fire RemoteServerCommandEvent
+         RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, p_139644_);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+         ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), f_139602_.m_11514_());
+         server.dispatchServerCommand(remoteConsole, serverCommand);
+         // CraftBukkit end
       });
       return this.f_139602_.m_11513_();
    }
@@ -545,6 +_,11 @@
       return false;
    }
 
+   @Override //Forge: Enable formated text for colors in console.
+   public void m_6352_(net.minecraft.network.chat.Component message, java.util.UUID p_108776_) {
+      f_139598_.info(message.getString());
+   }
+
    public int m_7186_(int p_139659_) {
       return this.m_7913_().f_139723_ * p_139659_ / 100;
    }
@@ -588,4 +_,11 @@
    public Component m_141958_() {
       return this.f_142863_;
    }
+
+   // CraftBukkit start
+   public boolean isDebugging() {
+      return this.m_7913_().debug;
+   }
+
+   // CraftBukkit end
 }
